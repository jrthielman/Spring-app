package com.example.app.ws.ui.controller;import com.example.app.ws.service.AddressService;import com.example.app.ws.service.UserService;import com.example.app.ws.shared.dto.AddressDto;import com.example.app.ws.shared.dto.UserDto;import com.example.app.ws.ui.model.request.UserDetailsRequestModel;import com.example.app.ws.ui.model.response.AddressRest;import com.example.app.ws.ui.model.response.OperationStatusModel;import com.example.app.ws.ui.model.response.RequestOperationStatus;import com.example.app.ws.ui.model.response.UserRest;import org.modelmapper.ModelMapper;import org.modelmapper.TypeToken;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.hateoas.Link;import org.springframework.hateoas.Resource;import org.springframework.hateoas.Resources;import org.springframework.http.MediaType;import org.springframework.web.bind.annotation.*;import java.lang.reflect.Type;import java.util.ArrayList;import java.util.List;import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;@RestController@RequestMapping("/users")public class UserController {    private UserService userService;    private AddressService addressService;    @Autowired    UserController(UserService userService, AddressService addressService) {        this.userService = userService;        this.addressService = addressService;    }    @GetMapping(path = "/email-verification", produces = {            MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_JSON_VALUE})    public OperationStatusModel verifyEmailToken(@RequestParam(value = "token") String token) {        OperationStatusModel returnValue = new OperationStatusModel();        returnValue.setOprationName(RequestOperationName.VERIFY_EMAIL.name());        boolean isVerified = this.userService.verifyEmailToken(token);        if(isVerified){            returnValue.setOperationResult(RequestOperationStatus.SUCCESS.name());        }else{            returnValue.setOperationResult(RequestOperationStatus.ERROR.name());        }        return returnValue;    }    @GetMapping(path = "/{id}", produces = {            MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_JSON_VALUE,            "application/hal+json"})    public Resource<UserRest> getUser(@PathVariable String id) {        UserDto userDto = this.userService.getUserByUserId(id);        Link addressesLink = linkTo(methodOn(UserController.class).getUserAddresses(id)).withRel("addresses");        UserRest userResponseModel = new ModelMapper().map(userDto, UserRest.class);        userResponseModel.add(addressesLink);        return new Resource<>(userResponseModel);    }    @GetMapping(produces = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE})    public List<UserRest> getUsers(@RequestParam(value = "page", defaultValue = "0") int page,                                   @RequestParam(value = "limit", defaultValue = "25") int limit) {        List<UserDto> userDto = this.userService.getAllUsers(page, limit);        Type listType = new TypeToken<List<UserRest>>() {        }.getType();        return new ModelMapper().map(userDto, listType);    }    @GetMapping(path = "/{id}/addresses", produces = {MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_JSON_VALUE,            "application/hal+json"})    public Resources<AddressRest> getUserAddresses(@PathVariable String id) {        List<AddressRest> addressListRestModel = new ArrayList<>();        List<AddressDto> addressssDto = this.addressService.getAddresses(id);        if (addressssDto != null && !addressssDto.isEmpty()) {            Type listType = new TypeToken<List<AddressRest>>() {            }.getType();            addressListRestModel = new ModelMapper().map(addressssDto, listType);            for (AddressRest address : addressListRestModel) {                Link addressLink = linkTo(methodOn(UserController.class).getUserAddress(id, address.getAddressId())).withRel("address");                address.add(addressLink);                Link userLink = linkTo(methodOn(UserController.class).getUser(id)).withRel("user");                address.add(userLink);            }        }        return new Resources<>(addressListRestModel);    }    @GetMapping(path = "/{userId}/addresses/{addressId}", produces = {MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_JSON_VALUE})    public AddressRest getUserAddress(@PathVariable String userId, @PathVariable String addressId) {        AddressDto addressesDto = this.addressService.getAddressesByUserId(userId, addressId);        Link addressLink = linkTo(methodOn(UserController.class).getUserAddress(userId, addressId)).withSelfRel();        Link addressesLink = linkTo(methodOn(UserController.class).getUserAddresses(userId)).withRel("addresses");        Link userLink = linkTo(methodOn(UserController.class).getUser(userId)).withRel("user");        AddressRest addressRestModel = new ModelMapper().map(addressesDto, AddressRest.class);        addressRestModel.add(addressLink);        addressRestModel.add(addressesLink);        addressRestModel.add(userLink);        return addressRestModel;    }    @PostMapping(consumes = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE}, produces = {            MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE})    public UserRest createUser(@RequestBody UserDetailsRequestModel userDetails) throws Exception {        ModelMapper modelMapper = new ModelMapper();        UserDto userDto = modelMapper.map(userDetails, UserDto.class);        UserDto createdUser = userService.createUser(userDto);        return modelMapper.map(createdUser, UserRest.class);    }    @PutMapping(path = "/{id}", consumes = {MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_JSON_VALUE}, produces = {MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_JSON_VALUE})    public UserRest updateUser(@RequestBody UserDetailsRequestModel userDetails, @PathVariable String id) {        UserRest returnValue = new UserRest();        UserDto userDto = new UserDto();        BeanUtils.copyProperties(userDetails, userDto); // copies properties from source object to target object        UserDto updatedUser = userService.updateUser(id, userDto);        BeanUtils.copyProperties(updatedUser, returnValue);        return returnValue;    }    @DeleteMapping(path = "/{id}", produces = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE})    public OperationStatusModel deleteUser(@PathVariable String id) {        OperationStatusModel returnValue = new OperationStatusModel();        returnValue.setOprationName(RequestOperationName.DELETE.name());        this.userService.deleteUser(id);        returnValue.setOperationResult(RequestOperationStatus.SUCCESS.name());        return returnValue;    }}